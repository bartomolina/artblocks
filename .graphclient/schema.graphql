schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Account {
  id: ID!
  tokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]
  """Projects the account owns tokens from"""
  projectsOwned(skip: Int = 0, first: Int = 100, orderBy: AccountProject_orderBy, orderDirection: OrderDirection, where: AccountProject_filter): [AccountProject!]
  """Projects the account is listed as artist for"""
  projectsCreated(skip: Int = 0, first: Int = 100, orderBy: Project_orderBy, orderDirection: OrderDirection, where: Project_filter): [Project!]
  """Receipts for the account, on minters with settlement"""
  receipts(skip: Int = 0, first: Int = 100, orderBy: Receipt_orderBy, orderDirection: OrderDirection, where: Receipt_filter): [Receipt!]
  """Contracts the account is whitelisted on"""
  whitelistedOn(skip: Int = 0, first: Int = 100, orderBy: Whitelisting_orderBy, orderDirection: OrderDirection, where: Whitelisting_filter): [Whitelisting!]
}

type AccountProject {
  id: ID!
  account: Account!
  project: Project!
  count: Int!
}

input AccountProject_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  count: Int
  count_not: Int
  count_gt: Int
  count_lt: Int
  count_gte: Int
  count_lte: Int
  count_in: [Int!]
  count_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum AccountProject_orderBy {
  id
  account
  project
  count
}

input Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokens_: Token_filter
  projectsOwned_: AccountProject_filter
  projectsCreated_: Project_filter
  receipts_: Receipt_filter
  whitelistedOn_: Whitelisting_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Account_orderBy {
  id
  tokens
  projectsOwned
  projectsCreated
  receipts
  whitelistedOn
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Contract {
  id: ID!
  admin: Bytes!
  """Core contract type"""
  type: CoreType!
  """Address that receives primary sales platform fees"""
  renderProviderAddress: Bytes!
  """Percentage of primary sales allocated to the platform"""
  renderProviderPercentage: BigInt!
  """
  Address that receives secondary sales platform royalties (null for pre-V3 contracts, check Royalty Registry)
  """
  renderProviderSecondarySalesAddress: Bytes
  """
  Basis points of secondary sales allocated to the platform (null for pre-V3 contracts, check Royalty Registry)
  """
  renderProviderSecondarySalesBPS: BigInt
  """List of contracts that are allowed to mint"""
  mintWhitelisted: [Bytes!]!
  """Randomizer contract used to generate token hashes"""
  randomizerContract: Bytes
  """Curation registry contract address"""
  curationRegistry: Bytes
  """Dependency registry contract address"""
  dependencyRegistry: Bytes
  nextProjectId: BigInt!
  """List of projects on the contract"""
  projects(skip: Int = 0, first: Int = 100, orderBy: Project_orderBy, orderDirection: OrderDirection, where: Project_filter): [Project!]
  """List of tokens on the contract"""
  tokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]
  """Accounts whitelisted on the contract"""
  whitelisted(skip: Int = 0, first: Int = 100, orderBy: Whitelisting_orderBy, orderDirection: OrderDirection, where: Whitelisting_filter): [Whitelisting!]
  createdAt: BigInt!
  updatedAt: BigInt!
  """Associated minter filter (if applicable)"""
  minterFilter: MinterFilter
  preferredIPFSGateway: String
  preferredArweaveGateway: String
  """New projects forbidden (can only be true on V3+ contracts)"""
  newProjectsForbidden: Boolean!
}

input Contract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  admin: Bytes
  admin_not: Bytes
  admin_in: [Bytes!]
  admin_not_in: [Bytes!]
  admin_contains: Bytes
  admin_not_contains: Bytes
  type: CoreType
  type_not: CoreType
  type_in: [CoreType!]
  type_not_in: [CoreType!]
  renderProviderAddress: Bytes
  renderProviderAddress_not: Bytes
  renderProviderAddress_in: [Bytes!]
  renderProviderAddress_not_in: [Bytes!]
  renderProviderAddress_contains: Bytes
  renderProviderAddress_not_contains: Bytes
  renderProviderPercentage: BigInt
  renderProviderPercentage_not: BigInt
  renderProviderPercentage_gt: BigInt
  renderProviderPercentage_lt: BigInt
  renderProviderPercentage_gte: BigInt
  renderProviderPercentage_lte: BigInt
  renderProviderPercentage_in: [BigInt!]
  renderProviderPercentage_not_in: [BigInt!]
  renderProviderSecondarySalesAddress: Bytes
  renderProviderSecondarySalesAddress_not: Bytes
  renderProviderSecondarySalesAddress_in: [Bytes!]
  renderProviderSecondarySalesAddress_not_in: [Bytes!]
  renderProviderSecondarySalesAddress_contains: Bytes
  renderProviderSecondarySalesAddress_not_contains: Bytes
  renderProviderSecondarySalesBPS: BigInt
  renderProviderSecondarySalesBPS_not: BigInt
  renderProviderSecondarySalesBPS_gt: BigInt
  renderProviderSecondarySalesBPS_lt: BigInt
  renderProviderSecondarySalesBPS_gte: BigInt
  renderProviderSecondarySalesBPS_lte: BigInt
  renderProviderSecondarySalesBPS_in: [BigInt!]
  renderProviderSecondarySalesBPS_not_in: [BigInt!]
  mintWhitelisted: [Bytes!]
  mintWhitelisted_not: [Bytes!]
  mintWhitelisted_contains: [Bytes!]
  mintWhitelisted_contains_nocase: [Bytes!]
  mintWhitelisted_not_contains: [Bytes!]
  mintWhitelisted_not_contains_nocase: [Bytes!]
  randomizerContract: Bytes
  randomizerContract_not: Bytes
  randomizerContract_in: [Bytes!]
  randomizerContract_not_in: [Bytes!]
  randomizerContract_contains: Bytes
  randomizerContract_not_contains: Bytes
  curationRegistry: Bytes
  curationRegistry_not: Bytes
  curationRegistry_in: [Bytes!]
  curationRegistry_not_in: [Bytes!]
  curationRegistry_contains: Bytes
  curationRegistry_not_contains: Bytes
  dependencyRegistry: Bytes
  dependencyRegistry_not: Bytes
  dependencyRegistry_in: [Bytes!]
  dependencyRegistry_not_in: [Bytes!]
  dependencyRegistry_contains: Bytes
  dependencyRegistry_not_contains: Bytes
  nextProjectId: BigInt
  nextProjectId_not: BigInt
  nextProjectId_gt: BigInt
  nextProjectId_lt: BigInt
  nextProjectId_gte: BigInt
  nextProjectId_lte: BigInt
  nextProjectId_in: [BigInt!]
  nextProjectId_not_in: [BigInt!]
  projects_: Project_filter
  tokens_: Token_filter
  whitelisted_: Whitelisting_filter
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
  minterFilter: String
  minterFilter_not: String
  minterFilter_gt: String
  minterFilter_lt: String
  minterFilter_gte: String
  minterFilter_lte: String
  minterFilter_in: [String!]
  minterFilter_not_in: [String!]
  minterFilter_contains: String
  minterFilter_contains_nocase: String
  minterFilter_not_contains: String
  minterFilter_not_contains_nocase: String
  minterFilter_starts_with: String
  minterFilter_starts_with_nocase: String
  minterFilter_not_starts_with: String
  minterFilter_not_starts_with_nocase: String
  minterFilter_ends_with: String
  minterFilter_ends_with_nocase: String
  minterFilter_not_ends_with: String
  minterFilter_not_ends_with_nocase: String
  minterFilter_: MinterFilter_filter
  preferredIPFSGateway: String
  preferredIPFSGateway_not: String
  preferredIPFSGateway_gt: String
  preferredIPFSGateway_lt: String
  preferredIPFSGateway_gte: String
  preferredIPFSGateway_lte: String
  preferredIPFSGateway_in: [String!]
  preferredIPFSGateway_not_in: [String!]
  preferredIPFSGateway_contains: String
  preferredIPFSGateway_contains_nocase: String
  preferredIPFSGateway_not_contains: String
  preferredIPFSGateway_not_contains_nocase: String
  preferredIPFSGateway_starts_with: String
  preferredIPFSGateway_starts_with_nocase: String
  preferredIPFSGateway_not_starts_with: String
  preferredIPFSGateway_not_starts_with_nocase: String
  preferredIPFSGateway_ends_with: String
  preferredIPFSGateway_ends_with_nocase: String
  preferredIPFSGateway_not_ends_with: String
  preferredIPFSGateway_not_ends_with_nocase: String
  preferredArweaveGateway: String
  preferredArweaveGateway_not: String
  preferredArweaveGateway_gt: String
  preferredArweaveGateway_lt: String
  preferredArweaveGateway_gte: String
  preferredArweaveGateway_lte: String
  preferredArweaveGateway_in: [String!]
  preferredArweaveGateway_not_in: [String!]
  preferredArweaveGateway_contains: String
  preferredArweaveGateway_contains_nocase: String
  preferredArweaveGateway_not_contains: String
  preferredArweaveGateway_not_contains_nocase: String
  preferredArweaveGateway_starts_with: String
  preferredArweaveGateway_starts_with_nocase: String
  preferredArweaveGateway_not_starts_with: String
  preferredArweaveGateway_not_starts_with_nocase: String
  preferredArweaveGateway_ends_with: String
  preferredArweaveGateway_ends_with_nocase: String
  preferredArweaveGateway_not_ends_with: String
  preferredArweaveGateway_not_ends_with_nocase: String
  newProjectsForbidden: Boolean
  newProjectsForbidden_not: Boolean
  newProjectsForbidden_in: [Boolean!]
  newProjectsForbidden_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Contract_orderBy {
  id
  admin
  type
  renderProviderAddress
  renderProviderPercentage
  renderProviderSecondarySalesAddress
  renderProviderSecondarySalesBPS
  mintWhitelisted
  randomizerContract
  curationRegistry
  dependencyRegistry
  nextProjectId
  projects
  tokens
  whitelisted
  createdAt
  updatedAt
  minterFilter
  preferredIPFSGateway
  preferredArweaveGateway
  newProjectsForbidden
}

enum CoreType {
  """First Art Blocks flagship core"""
  GenArt721CoreV0
  """Second Art Blocks flagship core"""
  GenArt721CoreV1
  """Art Blocks Engine & Partner cores"""
  GenArt721CoreV2
  """Third Art Blocks flagship core"""
  GenArt721CoreV3
}

enum Exchange {
  """Opensea V1"""
  OS_V1
  """Opensea V2"""
  OS_V2
  """LooksRare"""
  LR_V1
  """Opensea Seaport"""
  OS_SP
}

type Minter {
  """Unique identifier made up of minter contract address"""
  id: ID!
  """Minter type"""
  type: MinterType!
  """Associated Minter Filter"""
  minterFilter: MinterFilter!
  """
  Minimum allowed auction length in seconds (linear Dutch auction minters)
  """
  minimumAuctionLengthInSeconds: BigInt
  """
  Minimum allowed half life in seconds (exponential Dutch auction minters)
  """
  minimumHalfLifeInSeconds: BigInt
  """
  Maximum allowed half life in seconds (exponential Dutch auction minters)
  """
  maximumHalfLifeInSeconds: BigInt
  """Configuration details used by specific minters (json string)"""
  extraMinterDetails: String!
  coreContract: Contract!
  """Receipts for this minter, only for minters with settlement"""
  receipts(skip: Int = 0, first: Int = 100, orderBy: Receipt_orderBy, orderDirection: OrderDirection, where: Receipt_filter): [Receipt!]
  updatedAt: BigInt!
}

type MinterFilter {
  """Unique identifier made up of minter filter contract address"""
  id: ID!
  """Associated core contract"""
  coreContract: Contract!
  """Minters allowlisted on MinterFilter"""
  minterAllowlist(skip: Int = 0, first: Int = 100, orderBy: Minter_orderBy, orderDirection: OrderDirection, where: Minter_filter): [Minter!]!
  """Minters associated with MinterFilter"""
  associatedMinters(skip: Int = 0, first: Int = 100, orderBy: Minter_orderBy, orderDirection: OrderDirection, where: Minter_filter): [Minter!]!
  updatedAt: BigInt!
}

input MinterFilter_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  coreContract: String
  coreContract_not: String
  coreContract_gt: String
  coreContract_lt: String
  coreContract_gte: String
  coreContract_lte: String
  coreContract_in: [String!]
  coreContract_not_in: [String!]
  coreContract_contains: String
  coreContract_contains_nocase: String
  coreContract_not_contains: String
  coreContract_not_contains_nocase: String
  coreContract_starts_with: String
  coreContract_starts_with_nocase: String
  coreContract_not_starts_with: String
  coreContract_not_starts_with_nocase: String
  coreContract_ends_with: String
  coreContract_ends_with_nocase: String
  coreContract_not_ends_with: String
  coreContract_not_ends_with_nocase: String
  coreContract_: Contract_filter
  minterAllowlist: [String!]
  minterAllowlist_not: [String!]
  minterAllowlist_contains: [String!]
  minterAllowlist_contains_nocase: [String!]
  minterAllowlist_not_contains: [String!]
  minterAllowlist_not_contains_nocase: [String!]
  minterAllowlist_: Minter_filter
  associatedMinters_: Minter_filter
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum MinterFilter_orderBy {
  id
  coreContract
  minterAllowlist
  associatedMinters
  updatedAt
}

enum MinterType {
  MinterSetPriceV0
  MinterSetPriceERC20V0
  MinterDALinV0
  MinterDAExpV0
  MinterSetPriceV1
  MinterSetPriceERC20V1
  MinterDALinV1
  MinterDAExpV1
  MinterHolderV0
  MinterMerkleV0
  MinterSetPriceV2
  MinterSetPriceERC20V2
  MinterDALinV2
  MinterDAExpV2
  MinterHolderV1
  MinterHolderV2
  MinterMerkleV1
  MinterMerkleV2
  MinterDAExpSettlementV0
  MinterMerkleV3
}

input Minter_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: MinterType
  type_not: MinterType
  type_in: [MinterType!]
  type_not_in: [MinterType!]
  minterFilter: String
  minterFilter_not: String
  minterFilter_gt: String
  minterFilter_lt: String
  minterFilter_gte: String
  minterFilter_lte: String
  minterFilter_in: [String!]
  minterFilter_not_in: [String!]
  minterFilter_contains: String
  minterFilter_contains_nocase: String
  minterFilter_not_contains: String
  minterFilter_not_contains_nocase: String
  minterFilter_starts_with: String
  minterFilter_starts_with_nocase: String
  minterFilter_not_starts_with: String
  minterFilter_not_starts_with_nocase: String
  minterFilter_ends_with: String
  minterFilter_ends_with_nocase: String
  minterFilter_not_ends_with: String
  minterFilter_not_ends_with_nocase: String
  minterFilter_: MinterFilter_filter
  minimumAuctionLengthInSeconds: BigInt
  minimumAuctionLengthInSeconds_not: BigInt
  minimumAuctionLengthInSeconds_gt: BigInt
  minimumAuctionLengthInSeconds_lt: BigInt
  minimumAuctionLengthInSeconds_gte: BigInt
  minimumAuctionLengthInSeconds_lte: BigInt
  minimumAuctionLengthInSeconds_in: [BigInt!]
  minimumAuctionLengthInSeconds_not_in: [BigInt!]
  minimumHalfLifeInSeconds: BigInt
  minimumHalfLifeInSeconds_not: BigInt
  minimumHalfLifeInSeconds_gt: BigInt
  minimumHalfLifeInSeconds_lt: BigInt
  minimumHalfLifeInSeconds_gte: BigInt
  minimumHalfLifeInSeconds_lte: BigInt
  minimumHalfLifeInSeconds_in: [BigInt!]
  minimumHalfLifeInSeconds_not_in: [BigInt!]
  maximumHalfLifeInSeconds: BigInt
  maximumHalfLifeInSeconds_not: BigInt
  maximumHalfLifeInSeconds_gt: BigInt
  maximumHalfLifeInSeconds_lt: BigInt
  maximumHalfLifeInSeconds_gte: BigInt
  maximumHalfLifeInSeconds_lte: BigInt
  maximumHalfLifeInSeconds_in: [BigInt!]
  maximumHalfLifeInSeconds_not_in: [BigInt!]
  extraMinterDetails: String
  extraMinterDetails_not: String
  extraMinterDetails_gt: String
  extraMinterDetails_lt: String
  extraMinterDetails_gte: String
  extraMinterDetails_lte: String
  extraMinterDetails_in: [String!]
  extraMinterDetails_not_in: [String!]
  extraMinterDetails_contains: String
  extraMinterDetails_contains_nocase: String
  extraMinterDetails_not_contains: String
  extraMinterDetails_not_contains_nocase: String
  extraMinterDetails_starts_with: String
  extraMinterDetails_starts_with_nocase: String
  extraMinterDetails_not_starts_with: String
  extraMinterDetails_not_starts_with_nocase: String
  extraMinterDetails_ends_with: String
  extraMinterDetails_ends_with_nocase: String
  extraMinterDetails_not_ends_with: String
  extraMinterDetails_not_ends_with_nocase: String
  coreContract: String
  coreContract_not: String
  coreContract_gt: String
  coreContract_lt: String
  coreContract_gte: String
  coreContract_lte: String
  coreContract_in: [String!]
  coreContract_not_in: [String!]
  coreContract_contains: String
  coreContract_contains_nocase: String
  coreContract_not_contains: String
  coreContract_not_contains_nocase: String
  coreContract_starts_with: String
  coreContract_starts_with_nocase: String
  coreContract_not_starts_with: String
  coreContract_not_starts_with_nocase: String
  coreContract_ends_with: String
  coreContract_ends_with_nocase: String
  coreContract_not_ends_with: String
  coreContract_not_ends_with_nocase: String
  coreContract_: Contract_filter
  receipts_: Receipt_filter
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Minter_orderBy {
  id
  type
  minterFilter
  minimumAuctionLengthInSeconds
  minimumHalfLifeInSeconds
  maximumHalfLifeInSeconds
  extraMinterDetails
  coreContract
  receipts
  updatedAt
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Payment {
  """
  Payment id formatted: '{SaleId}-{paymentNumber}' (paymentNumber will be 0 for non-Seaport trades)
  """
  id: ID!
  """Type of token transferred in this payment"""
  paymentType: PaymentType!
  """The address of the token used for the payment"""
  paymentToken: Bytes!
  """The price of the sale"""
  price: BigInt!
  """The associated sale"""
  sale: Sale!
  """The recipient address"""
  recipient: Bytes!
}

enum PaymentType {
  Native
  ERC20
  ERC721
  ERC1155
}

input Payment_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  paymentType: PaymentType
  paymentType_not: PaymentType
  paymentType_in: [PaymentType!]
  paymentType_not_in: [PaymentType!]
  paymentToken: Bytes
  paymentToken_not: Bytes
  paymentToken_in: [Bytes!]
  paymentToken_not_in: [Bytes!]
  paymentToken_contains: Bytes
  paymentToken_not_contains: Bytes
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  sale: String
  sale_not: String
  sale_gt: String
  sale_lt: String
  sale_gte: String
  sale_lte: String
  sale_in: [String!]
  sale_not_in: [String!]
  sale_contains: String
  sale_contains_nocase: String
  sale_not_contains: String
  sale_not_contains_nocase: String
  sale_starts_with: String
  sale_starts_with_nocase: String
  sale_not_starts_with: String
  sale_not_starts_with_nocase: String
  sale_ends_with: String
  sale_ends_with_nocase: String
  sale_not_ends_with: String
  sale_not_ends_with_nocase: String
  sale_: Sale_filter
  recipient: Bytes
  recipient_not: Bytes
  recipient_in: [Bytes!]
  recipient_not_in: [Bytes!]
  recipient_contains: Bytes
  recipient_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Payment_orderBy {
  id
  paymentType
  paymentToken
  price
  sale
  recipient
}

type Project {
  """Unique identifier made up of contract address and project id"""
  id: ID!
  """ID of the project on the contract"""
  projectId: BigInt!
  """Determines if the project should be visible to the public"""
  active: Boolean!
  """Address to split primary sales with the artist"""
  additionalPayee: Bytes
  """
  Percentage of artist's share of primary sales that goes to additional payee
  """
  additionalPayeePercentage: BigInt
  """Address to split Secondary sales with the artist"""
  additionalPayeeSecondarySalesAddress: Bytes
  """
  Percentage of artist's share of secondary sales that goes to additional payee
  """
  additionalPayeeSecondarySalesPercentage: BigInt
  """Artist that created the project"""
  artist: Account!
  """Wallet address of the artist"""
  artistAddress: Bytes!
  """Artist name"""
  artistName: String
  baseIpfsUri: String
  baseUri: String
  """A project is complete when it has reached its maximum invocations"""
  complete: Boolean!
  """Timestamp at which a project was completed"""
  completedAt: BigInt
  """
  Curated, playground, factory. A project with no curation status is considered factory
  """
  curationStatus: String
  """ERC-20 contract address if the project is purchasable via ERC-20"""
  currencyAddress: Bytes
  """Currency symbol for ERC-20"""
  currencySymbol: String
  """Artist description of the project"""
  description: String
  """Is the project dynamic or a static image"""
  dynamic: Boolean!
  """
  Number of times the project has been invoked - number of tokens of the project
  """
  invocations: BigInt!
  ipfsHash: String
  """License for the project"""
  license: String
  """
  For V3 and-on, this field is null, and projects lock 4 weeks after `completedAt`. Once the project is locked its script may never be updated again.
  """
  locked: Boolean
  """Maximum number of invocations allowed for the project"""
  maxInvocations: BigInt!
  """Project name"""
  name: String
  """Purchases paused"""
  paused: Boolean!
  pricePerTokenInWei: BigInt!
  """Artist/additional payee royalty percentage"""
  royaltyPercentage: BigInt
  """The full script composed of scripts"""
  script: String
  """Parts of the project script"""
  scripts(skip: Int = 0, first: Int = 100, orderBy: ProjectScript_orderBy, orderDirection: OrderDirection, where: ProjectScript_filter): [ProjectScript!]
  """The number of scripts stored on-chain"""
  scriptCount: BigInt!
  """The number of external asset dependencies stored on-chain"""
  externalAssetDependencyCount: BigInt!
  """
  Once the project's external asset dependencies are locked they may never be modified again
  """
  externalAssetDependenciesLocked: Boolean!
  """Extra information about the script and rendering options"""
  scriptJSON: String
  """Script type and version (see `scriptJSON` if null)"""
  scriptTypeAndVersion: String
  """Aspect ratio of the project (see `scriptJSON` if null)"""
  aspectRatio: String
  """Tokens of the project"""
  tokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]
  """Does the project actually use the hash string"""
  useHashString: Boolean!
  """Does the project use media from ipfs"""
  useIpfs: Boolean
  """Artist or project website"""
  website: String
  """Proposed Artist addresses and payment split percentages"""
  proposedArtistAddressesAndSplits: ProposedArtistAddressesAndSplit
  """Accounts that own tokens of the project"""
  owners(skip: Int = 0, first: Int = 100, orderBy: AccountProject_orderBy, orderDirection: OrderDirection, where: AccountProject_filter): [AccountProject!]
  """Receipts for this project, only on minters with settlement"""
  receipts(skip: Int = 0, first: Int = 100, orderBy: Receipt_orderBy, orderDirection: OrderDirection, where: Receipt_filter): [Receipt!]
  createdAt: BigInt!
  updatedAt: BigInt!
  activatedAt: BigInt
  scriptUpdatedAt: BigInt
  contract: Contract!
  """
  Minter configuration for this project (not implemented prior to minter filters)
  """
  minterConfiguration: ProjectMinterConfiguration
  """Lookup table to get the Sale history of the project"""
  saleLookupTables(skip: Int = 0, first: Int = 100, orderBy: SaleLookupTable_orderBy, orderDirection: OrderDirection, where: SaleLookupTable_filter): [SaleLookupTable!]!
  externalAssetDependencies(skip: Int = 0, first: Int = 100, orderBy: ProjectExternalAssetDependency_orderBy, orderDirection: OrderDirection, where: ProjectExternalAssetDependency_filter): [ProjectExternalAssetDependency!]!
}

type ProjectExternalAssetDependency {
  """Unique identifier made up of projectId-index"""
  id: ID!
  """The associated project"""
  project: Project!
  """The dependency type"""
  dependencyType: ProjectExternalAssetDependencyType!
  """The dependency cid"""
  cid: String!
  """The dependency index"""
  index: BigInt!
}

enum ProjectExternalAssetDependencyType {
  """Asset hosted on IPFS"""
  IPFS
  """Asset hosted on Arweave"""
  ARWEAVE
}

input ProjectExternalAssetDependency_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  dependencyType: ProjectExternalAssetDependencyType
  dependencyType_not: ProjectExternalAssetDependencyType
  dependencyType_in: [ProjectExternalAssetDependencyType!]
  dependencyType_not_in: [ProjectExternalAssetDependencyType!]
  cid: String
  cid_not: String
  cid_gt: String
  cid_lt: String
  cid_gte: String
  cid_lte: String
  cid_in: [String!]
  cid_not_in: [String!]
  cid_contains: String
  cid_contains_nocase: String
  cid_not_contains: String
  cid_not_contains_nocase: String
  cid_starts_with: String
  cid_starts_with_nocase: String
  cid_not_starts_with: String
  cid_not_starts_with_nocase: String
  cid_ends_with: String
  cid_ends_with_nocase: String
  cid_not_ends_with: String
  cid_not_ends_with_nocase: String
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum ProjectExternalAssetDependency_orderBy {
  id
  project
  dependencyType
  cid
  index
}

type ProjectMinterConfiguration {
  """Unique identifier made up of minter contract address-projectId"""
  id: ID!
  """The associated project"""
  project: Project!
  """The associated minter"""
  minter: Minter!
  """true if project's token price has been configured on minter"""
  priceIsConfigured: Boolean!
  """currency symbol as defined on minter - ETH reserved for ether"""
  currencySymbol: String!
  """currency address as defined on minter - address(0) reserved for ether"""
  currencyAddress: Bytes!
  """Defines if purchasing token to another is allowed"""
  purchaseToDisabled: Boolean!
  """price of token or resting price of Duch auction, in wei"""
  basePrice: BigInt
  """Dutch auction start price, in wei"""
  startPrice: BigInt
  """Half life for exponential decay Dutch auction, in seconds"""
  halfLifeSeconds: BigInt
  """Dutch auction start time (unix timestamp)"""
  startTime: BigInt
  """Linear Dutch auction end time (unix timestamp)"""
  endTime: BigInt
  """
  Configuration details used by specific minter project configurations (json string)
  """
  extraMinterDetails: String!
}

input ProjectMinterConfiguration_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  minter: String
  minter_not: String
  minter_gt: String
  minter_lt: String
  minter_gte: String
  minter_lte: String
  minter_in: [String!]
  minter_not_in: [String!]
  minter_contains: String
  minter_contains_nocase: String
  minter_not_contains: String
  minter_not_contains_nocase: String
  minter_starts_with: String
  minter_starts_with_nocase: String
  minter_not_starts_with: String
  minter_not_starts_with_nocase: String
  minter_ends_with: String
  minter_ends_with_nocase: String
  minter_not_ends_with: String
  minter_not_ends_with_nocase: String
  minter_: Minter_filter
  priceIsConfigured: Boolean
  priceIsConfigured_not: Boolean
  priceIsConfigured_in: [Boolean!]
  priceIsConfigured_not_in: [Boolean!]
  currencySymbol: String
  currencySymbol_not: String
  currencySymbol_gt: String
  currencySymbol_lt: String
  currencySymbol_gte: String
  currencySymbol_lte: String
  currencySymbol_in: [String!]
  currencySymbol_not_in: [String!]
  currencySymbol_contains: String
  currencySymbol_contains_nocase: String
  currencySymbol_not_contains: String
  currencySymbol_not_contains_nocase: String
  currencySymbol_starts_with: String
  currencySymbol_starts_with_nocase: String
  currencySymbol_not_starts_with: String
  currencySymbol_not_starts_with_nocase: String
  currencySymbol_ends_with: String
  currencySymbol_ends_with_nocase: String
  currencySymbol_not_ends_with: String
  currencySymbol_not_ends_with_nocase: String
  currencyAddress: Bytes
  currencyAddress_not: Bytes
  currencyAddress_in: [Bytes!]
  currencyAddress_not_in: [Bytes!]
  currencyAddress_contains: Bytes
  currencyAddress_not_contains: Bytes
  purchaseToDisabled: Boolean
  purchaseToDisabled_not: Boolean
  purchaseToDisabled_in: [Boolean!]
  purchaseToDisabled_not_in: [Boolean!]
  basePrice: BigInt
  basePrice_not: BigInt
  basePrice_gt: BigInt
  basePrice_lt: BigInt
  basePrice_gte: BigInt
  basePrice_lte: BigInt
  basePrice_in: [BigInt!]
  basePrice_not_in: [BigInt!]
  startPrice: BigInt
  startPrice_not: BigInt
  startPrice_gt: BigInt
  startPrice_lt: BigInt
  startPrice_gte: BigInt
  startPrice_lte: BigInt
  startPrice_in: [BigInt!]
  startPrice_not_in: [BigInt!]
  halfLifeSeconds: BigInt
  halfLifeSeconds_not: BigInt
  halfLifeSeconds_gt: BigInt
  halfLifeSeconds_lt: BigInt
  halfLifeSeconds_gte: BigInt
  halfLifeSeconds_lte: BigInt
  halfLifeSeconds_in: [BigInt!]
  halfLifeSeconds_not_in: [BigInt!]
  startTime: BigInt
  startTime_not: BigInt
  startTime_gt: BigInt
  startTime_lt: BigInt
  startTime_gte: BigInt
  startTime_lte: BigInt
  startTime_in: [BigInt!]
  startTime_not_in: [BigInt!]
  endTime: BigInt
  endTime_not: BigInt
  endTime_gt: BigInt
  endTime_lt: BigInt
  endTime_gte: BigInt
  endTime_lte: BigInt
  endTime_in: [BigInt!]
  endTime_not_in: [BigInt!]
  extraMinterDetails: String
  extraMinterDetails_not: String
  extraMinterDetails_gt: String
  extraMinterDetails_lt: String
  extraMinterDetails_gte: String
  extraMinterDetails_lte: String
  extraMinterDetails_in: [String!]
  extraMinterDetails_not_in: [String!]
  extraMinterDetails_contains: String
  extraMinterDetails_contains_nocase: String
  extraMinterDetails_not_contains: String
  extraMinterDetails_not_contains_nocase: String
  extraMinterDetails_starts_with: String
  extraMinterDetails_starts_with_nocase: String
  extraMinterDetails_not_starts_with: String
  extraMinterDetails_not_starts_with_nocase: String
  extraMinterDetails_ends_with: String
  extraMinterDetails_ends_with_nocase: String
  extraMinterDetails_not_ends_with: String
  extraMinterDetails_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum ProjectMinterConfiguration_orderBy {
  id
  project
  minter
  priceIsConfigured
  currencySymbol
  currencyAddress
  purchaseToDisabled
  basePrice
  startPrice
  halfLifeSeconds
  startTime
  endTime
  extraMinterDetails
}

type ProjectScript {
  id: ID!
  index: BigInt!
  project: Project!
  script: String!
}

input ProjectScript_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  script: String
  script_not: String
  script_gt: String
  script_lt: String
  script_gte: String
  script_lte: String
  script_in: [String!]
  script_not_in: [String!]
  script_contains: String
  script_contains_nocase: String
  script_not_contains: String
  script_not_contains_nocase: String
  script_starts_with: String
  script_starts_with_nocase: String
  script_not_starts_with: String
  script_not_starts_with_nocase: String
  script_ends_with: String
  script_ends_with_nocase: String
  script_not_ends_with: String
  script_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum ProjectScript_orderBy {
  id
  index
  project
  script
}

input Project_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  projectId: BigInt
  projectId_not: BigInt
  projectId_gt: BigInt
  projectId_lt: BigInt
  projectId_gte: BigInt
  projectId_lte: BigInt
  projectId_in: [BigInt!]
  projectId_not_in: [BigInt!]
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  additionalPayee: Bytes
  additionalPayee_not: Bytes
  additionalPayee_in: [Bytes!]
  additionalPayee_not_in: [Bytes!]
  additionalPayee_contains: Bytes
  additionalPayee_not_contains: Bytes
  additionalPayeePercentage: BigInt
  additionalPayeePercentage_not: BigInt
  additionalPayeePercentage_gt: BigInt
  additionalPayeePercentage_lt: BigInt
  additionalPayeePercentage_gte: BigInt
  additionalPayeePercentage_lte: BigInt
  additionalPayeePercentage_in: [BigInt!]
  additionalPayeePercentage_not_in: [BigInt!]
  additionalPayeeSecondarySalesAddress: Bytes
  additionalPayeeSecondarySalesAddress_not: Bytes
  additionalPayeeSecondarySalesAddress_in: [Bytes!]
  additionalPayeeSecondarySalesAddress_not_in: [Bytes!]
  additionalPayeeSecondarySalesAddress_contains: Bytes
  additionalPayeeSecondarySalesAddress_not_contains: Bytes
  additionalPayeeSecondarySalesPercentage: BigInt
  additionalPayeeSecondarySalesPercentage_not: BigInt
  additionalPayeeSecondarySalesPercentage_gt: BigInt
  additionalPayeeSecondarySalesPercentage_lt: BigInt
  additionalPayeeSecondarySalesPercentage_gte: BigInt
  additionalPayeeSecondarySalesPercentage_lte: BigInt
  additionalPayeeSecondarySalesPercentage_in: [BigInt!]
  additionalPayeeSecondarySalesPercentage_not_in: [BigInt!]
  artist: String
  artist_not: String
  artist_gt: String
  artist_lt: String
  artist_gte: String
  artist_lte: String
  artist_in: [String!]
  artist_not_in: [String!]
  artist_contains: String
  artist_contains_nocase: String
  artist_not_contains: String
  artist_not_contains_nocase: String
  artist_starts_with: String
  artist_starts_with_nocase: String
  artist_not_starts_with: String
  artist_not_starts_with_nocase: String
  artist_ends_with: String
  artist_ends_with_nocase: String
  artist_not_ends_with: String
  artist_not_ends_with_nocase: String
  artist_: Account_filter
  artistAddress: Bytes
  artistAddress_not: Bytes
  artistAddress_in: [Bytes!]
  artistAddress_not_in: [Bytes!]
  artistAddress_contains: Bytes
  artistAddress_not_contains: Bytes
  artistName: String
  artistName_not: String
  artistName_gt: String
  artistName_lt: String
  artistName_gte: String
  artistName_lte: String
  artistName_in: [String!]
  artistName_not_in: [String!]
  artistName_contains: String
  artistName_contains_nocase: String
  artistName_not_contains: String
  artistName_not_contains_nocase: String
  artistName_starts_with: String
  artistName_starts_with_nocase: String
  artistName_not_starts_with: String
  artistName_not_starts_with_nocase: String
  artistName_ends_with: String
  artistName_ends_with_nocase: String
  artistName_not_ends_with: String
  artistName_not_ends_with_nocase: String
  baseIpfsUri: String
  baseIpfsUri_not: String
  baseIpfsUri_gt: String
  baseIpfsUri_lt: String
  baseIpfsUri_gte: String
  baseIpfsUri_lte: String
  baseIpfsUri_in: [String!]
  baseIpfsUri_not_in: [String!]
  baseIpfsUri_contains: String
  baseIpfsUri_contains_nocase: String
  baseIpfsUri_not_contains: String
  baseIpfsUri_not_contains_nocase: String
  baseIpfsUri_starts_with: String
  baseIpfsUri_starts_with_nocase: String
  baseIpfsUri_not_starts_with: String
  baseIpfsUri_not_starts_with_nocase: String
  baseIpfsUri_ends_with: String
  baseIpfsUri_ends_with_nocase: String
  baseIpfsUri_not_ends_with: String
  baseIpfsUri_not_ends_with_nocase: String
  baseUri: String
  baseUri_not: String
  baseUri_gt: String
  baseUri_lt: String
  baseUri_gte: String
  baseUri_lte: String
  baseUri_in: [String!]
  baseUri_not_in: [String!]
  baseUri_contains: String
  baseUri_contains_nocase: String
  baseUri_not_contains: String
  baseUri_not_contains_nocase: String
  baseUri_starts_with: String
  baseUri_starts_with_nocase: String
  baseUri_not_starts_with: String
  baseUri_not_starts_with_nocase: String
  baseUri_ends_with: String
  baseUri_ends_with_nocase: String
  baseUri_not_ends_with: String
  baseUri_not_ends_with_nocase: String
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  completedAt: BigInt
  completedAt_not: BigInt
  completedAt_gt: BigInt
  completedAt_lt: BigInt
  completedAt_gte: BigInt
  completedAt_lte: BigInt
  completedAt_in: [BigInt!]
  completedAt_not_in: [BigInt!]
  curationStatus: String
  curationStatus_not: String
  curationStatus_gt: String
  curationStatus_lt: String
  curationStatus_gte: String
  curationStatus_lte: String
  curationStatus_in: [String!]
  curationStatus_not_in: [String!]
  curationStatus_contains: String
  curationStatus_contains_nocase: String
  curationStatus_not_contains: String
  curationStatus_not_contains_nocase: String
  curationStatus_starts_with: String
  curationStatus_starts_with_nocase: String
  curationStatus_not_starts_with: String
  curationStatus_not_starts_with_nocase: String
  curationStatus_ends_with: String
  curationStatus_ends_with_nocase: String
  curationStatus_not_ends_with: String
  curationStatus_not_ends_with_nocase: String
  currencyAddress: Bytes
  currencyAddress_not: Bytes
  currencyAddress_in: [Bytes!]
  currencyAddress_not_in: [Bytes!]
  currencyAddress_contains: Bytes
  currencyAddress_not_contains: Bytes
  currencySymbol: String
  currencySymbol_not: String
  currencySymbol_gt: String
  currencySymbol_lt: String
  currencySymbol_gte: String
  currencySymbol_lte: String
  currencySymbol_in: [String!]
  currencySymbol_not_in: [String!]
  currencySymbol_contains: String
  currencySymbol_contains_nocase: String
  currencySymbol_not_contains: String
  currencySymbol_not_contains_nocase: String
  currencySymbol_starts_with: String
  currencySymbol_starts_with_nocase: String
  currencySymbol_not_starts_with: String
  currencySymbol_not_starts_with_nocase: String
  currencySymbol_ends_with: String
  currencySymbol_ends_with_nocase: String
  currencySymbol_not_ends_with: String
  currencySymbol_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  dynamic: Boolean
  dynamic_not: Boolean
  dynamic_in: [Boolean!]
  dynamic_not_in: [Boolean!]
  invocations: BigInt
  invocations_not: BigInt
  invocations_gt: BigInt
  invocations_lt: BigInt
  invocations_gte: BigInt
  invocations_lte: BigInt
  invocations_in: [BigInt!]
  invocations_not_in: [BigInt!]
  ipfsHash: String
  ipfsHash_not: String
  ipfsHash_gt: String
  ipfsHash_lt: String
  ipfsHash_gte: String
  ipfsHash_lte: String
  ipfsHash_in: [String!]
  ipfsHash_not_in: [String!]
  ipfsHash_contains: String
  ipfsHash_contains_nocase: String
  ipfsHash_not_contains: String
  ipfsHash_not_contains_nocase: String
  ipfsHash_starts_with: String
  ipfsHash_starts_with_nocase: String
  ipfsHash_not_starts_with: String
  ipfsHash_not_starts_with_nocase: String
  ipfsHash_ends_with: String
  ipfsHash_ends_with_nocase: String
  ipfsHash_not_ends_with: String
  ipfsHash_not_ends_with_nocase: String
  license: String
  license_not: String
  license_gt: String
  license_lt: String
  license_gte: String
  license_lte: String
  license_in: [String!]
  license_not_in: [String!]
  license_contains: String
  license_contains_nocase: String
  license_not_contains: String
  license_not_contains_nocase: String
  license_starts_with: String
  license_starts_with_nocase: String
  license_not_starts_with: String
  license_not_starts_with_nocase: String
  license_ends_with: String
  license_ends_with_nocase: String
  license_not_ends_with: String
  license_not_ends_with_nocase: String
  locked: Boolean
  locked_not: Boolean
  locked_in: [Boolean!]
  locked_not_in: [Boolean!]
  maxInvocations: BigInt
  maxInvocations_not: BigInt
  maxInvocations_gt: BigInt
  maxInvocations_lt: BigInt
  maxInvocations_gte: BigInt
  maxInvocations_lte: BigInt
  maxInvocations_in: [BigInt!]
  maxInvocations_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  paused: Boolean
  paused_not: Boolean
  paused_in: [Boolean!]
  paused_not_in: [Boolean!]
  pricePerTokenInWei: BigInt
  pricePerTokenInWei_not: BigInt
  pricePerTokenInWei_gt: BigInt
  pricePerTokenInWei_lt: BigInt
  pricePerTokenInWei_gte: BigInt
  pricePerTokenInWei_lte: BigInt
  pricePerTokenInWei_in: [BigInt!]
  pricePerTokenInWei_not_in: [BigInt!]
  royaltyPercentage: BigInt
  royaltyPercentage_not: BigInt
  royaltyPercentage_gt: BigInt
  royaltyPercentage_lt: BigInt
  royaltyPercentage_gte: BigInt
  royaltyPercentage_lte: BigInt
  royaltyPercentage_in: [BigInt!]
  royaltyPercentage_not_in: [BigInt!]
  script: String
  script_not: String
  script_gt: String
  script_lt: String
  script_gte: String
  script_lte: String
  script_in: [String!]
  script_not_in: [String!]
  script_contains: String
  script_contains_nocase: String
  script_not_contains: String
  script_not_contains_nocase: String
  script_starts_with: String
  script_starts_with_nocase: String
  script_not_starts_with: String
  script_not_starts_with_nocase: String
  script_ends_with: String
  script_ends_with_nocase: String
  script_not_ends_with: String
  script_not_ends_with_nocase: String
  scripts_: ProjectScript_filter
  scriptCount: BigInt
  scriptCount_not: BigInt
  scriptCount_gt: BigInt
  scriptCount_lt: BigInt
  scriptCount_gte: BigInt
  scriptCount_lte: BigInt
  scriptCount_in: [BigInt!]
  scriptCount_not_in: [BigInt!]
  externalAssetDependencyCount: BigInt
  externalAssetDependencyCount_not: BigInt
  externalAssetDependencyCount_gt: BigInt
  externalAssetDependencyCount_lt: BigInt
  externalAssetDependencyCount_gte: BigInt
  externalAssetDependencyCount_lte: BigInt
  externalAssetDependencyCount_in: [BigInt!]
  externalAssetDependencyCount_not_in: [BigInt!]
  externalAssetDependenciesLocked: Boolean
  externalAssetDependenciesLocked_not: Boolean
  externalAssetDependenciesLocked_in: [Boolean!]
  externalAssetDependenciesLocked_not_in: [Boolean!]
  scriptJSON: String
  scriptJSON_not: String
  scriptJSON_gt: String
  scriptJSON_lt: String
  scriptJSON_gte: String
  scriptJSON_lte: String
  scriptJSON_in: [String!]
  scriptJSON_not_in: [String!]
  scriptJSON_contains: String
  scriptJSON_contains_nocase: String
  scriptJSON_not_contains: String
  scriptJSON_not_contains_nocase: String
  scriptJSON_starts_with: String
  scriptJSON_starts_with_nocase: String
  scriptJSON_not_starts_with: String
  scriptJSON_not_starts_with_nocase: String
  scriptJSON_ends_with: String
  scriptJSON_ends_with_nocase: String
  scriptJSON_not_ends_with: String
  scriptJSON_not_ends_with_nocase: String
  scriptTypeAndVersion: String
  scriptTypeAndVersion_not: String
  scriptTypeAndVersion_gt: String
  scriptTypeAndVersion_lt: String
  scriptTypeAndVersion_gte: String
  scriptTypeAndVersion_lte: String
  scriptTypeAndVersion_in: [String!]
  scriptTypeAndVersion_not_in: [String!]
  scriptTypeAndVersion_contains: String
  scriptTypeAndVersion_contains_nocase: String
  scriptTypeAndVersion_not_contains: String
  scriptTypeAndVersion_not_contains_nocase: String
  scriptTypeAndVersion_starts_with: String
  scriptTypeAndVersion_starts_with_nocase: String
  scriptTypeAndVersion_not_starts_with: String
  scriptTypeAndVersion_not_starts_with_nocase: String
  scriptTypeAndVersion_ends_with: String
  scriptTypeAndVersion_ends_with_nocase: String
  scriptTypeAndVersion_not_ends_with: String
  scriptTypeAndVersion_not_ends_with_nocase: String
  aspectRatio: String
  aspectRatio_not: String
  aspectRatio_gt: String
  aspectRatio_lt: String
  aspectRatio_gte: String
  aspectRatio_lte: String
  aspectRatio_in: [String!]
  aspectRatio_not_in: [String!]
  aspectRatio_contains: String
  aspectRatio_contains_nocase: String
  aspectRatio_not_contains: String
  aspectRatio_not_contains_nocase: String
  aspectRatio_starts_with: String
  aspectRatio_starts_with_nocase: String
  aspectRatio_not_starts_with: String
  aspectRatio_not_starts_with_nocase: String
  aspectRatio_ends_with: String
  aspectRatio_ends_with_nocase: String
  aspectRatio_not_ends_with: String
  aspectRatio_not_ends_with_nocase: String
  tokens_: Token_filter
  useHashString: Boolean
  useHashString_not: Boolean
  useHashString_in: [Boolean!]
  useHashString_not_in: [Boolean!]
  useIpfs: Boolean
  useIpfs_not: Boolean
  useIpfs_in: [Boolean!]
  useIpfs_not_in: [Boolean!]
  website: String
  website_not: String
  website_gt: String
  website_lt: String
  website_gte: String
  website_lte: String
  website_in: [String!]
  website_not_in: [String!]
  website_contains: String
  website_contains_nocase: String
  website_not_contains: String
  website_not_contains_nocase: String
  website_starts_with: String
  website_starts_with_nocase: String
  website_not_starts_with: String
  website_not_starts_with_nocase: String
  website_ends_with: String
  website_ends_with_nocase: String
  website_not_ends_with: String
  website_not_ends_with_nocase: String
  proposedArtistAddressesAndSplits: String
  proposedArtistAddressesAndSplits_not: String
  proposedArtistAddressesAndSplits_gt: String
  proposedArtistAddressesAndSplits_lt: String
  proposedArtistAddressesAndSplits_gte: String
  proposedArtistAddressesAndSplits_lte: String
  proposedArtistAddressesAndSplits_in: [String!]
  proposedArtistAddressesAndSplits_not_in: [String!]
  proposedArtistAddressesAndSplits_contains: String
  proposedArtistAddressesAndSplits_contains_nocase: String
  proposedArtistAddressesAndSplits_not_contains: String
  proposedArtistAddressesAndSplits_not_contains_nocase: String
  proposedArtistAddressesAndSplits_starts_with: String
  proposedArtistAddressesAndSplits_starts_with_nocase: String
  proposedArtistAddressesAndSplits_not_starts_with: String
  proposedArtistAddressesAndSplits_not_starts_with_nocase: String
  proposedArtistAddressesAndSplits_ends_with: String
  proposedArtistAddressesAndSplits_ends_with_nocase: String
  proposedArtistAddressesAndSplits_not_ends_with: String
  proposedArtistAddressesAndSplits_not_ends_with_nocase: String
  proposedArtistAddressesAndSplits_: ProposedArtistAddressesAndSplit_filter
  owners_: AccountProject_filter
  receipts_: Receipt_filter
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
  activatedAt: BigInt
  activatedAt_not: BigInt
  activatedAt_gt: BigInt
  activatedAt_lt: BigInt
  activatedAt_gte: BigInt
  activatedAt_lte: BigInt
  activatedAt_in: [BigInt!]
  activatedAt_not_in: [BigInt!]
  scriptUpdatedAt: BigInt
  scriptUpdatedAt_not: BigInt
  scriptUpdatedAt_gt: BigInt
  scriptUpdatedAt_lt: BigInt
  scriptUpdatedAt_gte: BigInt
  scriptUpdatedAt_lte: BigInt
  scriptUpdatedAt_in: [BigInt!]
  scriptUpdatedAt_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  minterConfiguration: String
  minterConfiguration_not: String
  minterConfiguration_gt: String
  minterConfiguration_lt: String
  minterConfiguration_gte: String
  minterConfiguration_lte: String
  minterConfiguration_in: [String!]
  minterConfiguration_not_in: [String!]
  minterConfiguration_contains: String
  minterConfiguration_contains_nocase: String
  minterConfiguration_not_contains: String
  minterConfiguration_not_contains_nocase: String
  minterConfiguration_starts_with: String
  minterConfiguration_starts_with_nocase: String
  minterConfiguration_not_starts_with: String
  minterConfiguration_not_starts_with_nocase: String
  minterConfiguration_ends_with: String
  minterConfiguration_ends_with_nocase: String
  minterConfiguration_not_ends_with: String
  minterConfiguration_not_ends_with_nocase: String
  minterConfiguration_: ProjectMinterConfiguration_filter
  saleLookupTables_: SaleLookupTable_filter
  externalAssetDependencies_: ProjectExternalAssetDependency_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Project_orderBy {
  id
  projectId
  active
  additionalPayee
  additionalPayeePercentage
  additionalPayeeSecondarySalesAddress
  additionalPayeeSecondarySalesPercentage
  artist
  artistAddress
  artistName
  baseIpfsUri
  baseUri
  complete
  completedAt
  curationStatus
  currencyAddress
  currencySymbol
  description
  dynamic
  invocations
  ipfsHash
  license
  locked
  maxInvocations
  name
  paused
  pricePerTokenInWei
  royaltyPercentage
  script
  scripts
  scriptCount
  externalAssetDependencyCount
  externalAssetDependenciesLocked
  scriptJSON
  scriptTypeAndVersion
  aspectRatio
  tokens
  useHashString
  useIpfs
  website
  proposedArtistAddressesAndSplits
  owners
  receipts
  createdAt
  updatedAt
  activatedAt
  scriptUpdatedAt
  contract
  minterConfiguration
  saleLookupTables
  externalAssetDependencies
}

type ProposedArtistAddressesAndSplit {
  """Unique identifier made up of contract address and project id"""
  id: ID!
  """Proposed artist address"""
  artistAddress: Bytes!
  """Proposed artist additional payee address for primary sales"""
  additionalPayeePrimarySalesAddress: Bytes!
  """Proposed artist additional payee percentage for primary sales"""
  additionalPayeePrimarySalesPercentage: BigInt!
  """Proposed artist additional payee address for secondary sales"""
  additionalPayeeSecondarySalesAddress: Bytes!
  """Proposed artist additional payee percentage for secondary sales"""
  additionalPayeeSecondarySalesPercentage: BigInt!
  """Project associated with this proposed artist addresses and splits"""
  project: Project!
  createdAt: BigInt!
}

input ProposedArtistAddressesAndSplit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  artistAddress: Bytes
  artistAddress_not: Bytes
  artistAddress_in: [Bytes!]
  artistAddress_not_in: [Bytes!]
  artistAddress_contains: Bytes
  artistAddress_not_contains: Bytes
  additionalPayeePrimarySalesAddress: Bytes
  additionalPayeePrimarySalesAddress_not: Bytes
  additionalPayeePrimarySalesAddress_in: [Bytes!]
  additionalPayeePrimarySalesAddress_not_in: [Bytes!]
  additionalPayeePrimarySalesAddress_contains: Bytes
  additionalPayeePrimarySalesAddress_not_contains: Bytes
  additionalPayeePrimarySalesPercentage: BigInt
  additionalPayeePrimarySalesPercentage_not: BigInt
  additionalPayeePrimarySalesPercentage_gt: BigInt
  additionalPayeePrimarySalesPercentage_lt: BigInt
  additionalPayeePrimarySalesPercentage_gte: BigInt
  additionalPayeePrimarySalesPercentage_lte: BigInt
  additionalPayeePrimarySalesPercentage_in: [BigInt!]
  additionalPayeePrimarySalesPercentage_not_in: [BigInt!]
  additionalPayeeSecondarySalesAddress: Bytes
  additionalPayeeSecondarySalesAddress_not: Bytes
  additionalPayeeSecondarySalesAddress_in: [Bytes!]
  additionalPayeeSecondarySalesAddress_not_in: [Bytes!]
  additionalPayeeSecondarySalesAddress_contains: Bytes
  additionalPayeeSecondarySalesAddress_not_contains: Bytes
  additionalPayeeSecondarySalesPercentage: BigInt
  additionalPayeeSecondarySalesPercentage_not: BigInt
  additionalPayeeSecondarySalesPercentage_gt: BigInt
  additionalPayeeSecondarySalesPercentage_lt: BigInt
  additionalPayeeSecondarySalesPercentage_gte: BigInt
  additionalPayeeSecondarySalesPercentage_lte: BigInt
  additionalPayeeSecondarySalesPercentage_in: [BigInt!]
  additionalPayeeSecondarySalesPercentage_not_in: [BigInt!]
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum ProposedArtistAddressesAndSplit_orderBy {
  id
  artistAddress
  additionalPayeePrimarySalesAddress
  additionalPayeePrimarySalesPercentage
  additionalPayeeSecondarySalesAddress
  additionalPayeeSecondarySalesPercentage
  project
  createdAt
}

type Query {
  project(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Project
  projects(
    skip: Int = 0
    first: Int = 100
    orderBy: Project_orderBy
    orderDirection: OrderDirection
    where: Project_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Project!]!
  projectScript(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectScript
  projectScripts(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectScript_orderBy
    orderDirection: OrderDirection
    where: ProjectScript_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectScript!]!
  proposedArtistAddressesAndSplit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProposedArtistAddressesAndSplit
  proposedArtistAddressesAndSplits(
    skip: Int = 0
    first: Int = 100
    orderBy: ProposedArtistAddressesAndSplit_orderBy
    orderDirection: OrderDirection
    where: ProposedArtistAddressesAndSplit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProposedArtistAddressesAndSplit!]!
  contract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Contract
  contracts(
    skip: Int = 0
    first: Int = 100
    orderBy: Contract_orderBy
    orderDirection: OrderDirection
    where: Contract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Contract!]!
  whitelisting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Whitelisting
  whitelistings(
    skip: Int = 0
    first: Int = 100
    orderBy: Whitelisting_orderBy
    orderDirection: OrderDirection
    where: Whitelisting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Whitelisting!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  accountProject(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountProject
  accountProjects(
    skip: Int = 0
    first: Int = 100
    orderBy: AccountProject_orderBy
    orderDirection: OrderDirection
    where: AccountProject_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccountProject!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  minterFilter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MinterFilter
  minterFilters(
    skip: Int = 0
    first: Int = 100
    orderBy: MinterFilter_orderBy
    orderDirection: OrderDirection
    where: MinterFilter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MinterFilter!]!
  minter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Minter
  minters(
    skip: Int = 0
    first: Int = 100
    orderBy: Minter_orderBy
    orderDirection: OrderDirection
    where: Minter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Minter!]!
  projectMinterConfiguration(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectMinterConfiguration
  projectMinterConfigurations(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectMinterConfiguration_orderBy
    orderDirection: OrderDirection
    where: ProjectMinterConfiguration_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectMinterConfiguration!]!
  receipt(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Receipt
  receipts(
    skip: Int = 0
    first: Int = 100
    orderBy: Receipt_orderBy
    orderDirection: OrderDirection
    where: Receipt_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Receipt!]!
  payment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Payment
  payments(
    skip: Int = 0
    first: Int = 100
    orderBy: Payment_orderBy
    orderDirection: OrderDirection
    where: Payment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Payment!]!
  sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sale
  sales(
    skip: Int = 0
    first: Int = 100
    orderBy: Sale_orderBy
    orderDirection: OrderDirection
    where: Sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sale!]!
  saleLookupTable(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SaleLookupTable
  saleLookupTables(
    skip: Int = 0
    first: Int = 100
    orderBy: SaleLookupTable_orderBy
    orderDirection: OrderDirection
    where: SaleLookupTable_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SaleLookupTable!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  projectExternalAssetDependency(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectExternalAssetDependency
  projectExternalAssetDependencies(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectExternalAssetDependency_orderBy
    orderDirection: OrderDirection
    where: ProjectExternalAssetDependency_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectExternalAssetDependency!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Receipt {
  """
  Unique identifier made up of minter contract address-projectId-accountAddress
  """
  id: ID!
  """The associated project"""
  project: Project!
  """The associated minter"""
  minter: Minter!
  """The associated account"""
  account: Account!
  """The total net amount posted (sent to settlement contract) for tokens"""
  netPosted: BigInt!
  """The total quantity of tokens purchased on the project"""
  numPurchased: BigInt!
  updatedAt: BigInt!
}

input Receipt_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  minter: String
  minter_not: String
  minter_gt: String
  minter_lt: String
  minter_gte: String
  minter_lte: String
  minter_in: [String!]
  minter_not_in: [String!]
  minter_contains: String
  minter_contains_nocase: String
  minter_not_contains: String
  minter_not_contains_nocase: String
  minter_starts_with: String
  minter_starts_with_nocase: String
  minter_not_starts_with: String
  minter_not_starts_with_nocase: String
  minter_ends_with: String
  minter_ends_with_nocase: String
  minter_not_ends_with: String
  minter_not_ends_with_nocase: String
  minter_: Minter_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  netPosted: BigInt
  netPosted_not: BigInt
  netPosted_gt: BigInt
  netPosted_lt: BigInt
  netPosted_gte: BigInt
  netPosted_lte: BigInt
  netPosted_in: [BigInt!]
  netPosted_not_in: [BigInt!]
  numPurchased: BigInt
  numPurchased_not: BigInt
  numPurchased_gt: BigInt
  numPurchased_lt: BigInt
  numPurchased_gte: BigInt
  numPurchased_lte: BigInt
  numPurchased_in: [BigInt!]
  numPurchased_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Receipt_orderBy {
  id
  project
  minter
  account
  netPosted
  numPurchased
  updatedAt
}

type Sale {
  """
  The sale id formated: tokenId - token.nextSaleId (using first token sold for bundles) for Opensea V1/V2, orderHash from sale event for Looksrare and Seaport
  """
  id: ID!
  """The hash of the transaction"""
  txHash: Bytes!
  """The exchange used for this sale"""
  exchange: Exchange!
  """The sale type (Single | Bundle)"""
  saleType: SaleType!
  """The block number of the sale"""
  blockNumber: BigInt!
  """The timestamp of the sale"""
  blockTimestamp: BigInt!
  """
  A raw formated string of the token(s) sold (i.e TokenID1::TokenID2::TokenID3)
  """
  summaryTokensSold: String!
  """Lookup table to get the list of Tokens sold in this sale"""
  saleLookupTables(skip: Int = 0, first: Int = 100, orderBy: SaleLookupTable_orderBy, orderDirection: OrderDirection, where: SaleLookupTable_filter): [SaleLookupTable!]!
  """The seller address"""
  seller: Bytes!
  """The buyer address"""
  buyer: Bytes!
  """List of Payment tokens involved in this sale"""
  payments(skip: Int = 0, first: Int = 100, orderBy: Payment_orderBy, orderDirection: OrderDirection, where: Payment_filter): [Payment!]!
  """Private sales are flagged by this boolean"""
  isPrivate: Boolean!
}

type SaleLookupTable {
  """Set to `Project Id::Token Id::Sale Id"""
  id: ID!
  """The block number of the sale"""
  blockNumber: BigInt!
  """Timestamp of the sale"""
  timestamp: BigInt!
  """The associated project"""
  project: Project!
  """The token sold"""
  token: Token!
  """The associated sale"""
  sale: Sale!
}

input SaleLookupTable_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  sale: String
  sale_not: String
  sale_gt: String
  sale_lt: String
  sale_gte: String
  sale_lte: String
  sale_in: [String!]
  sale_not_in: [String!]
  sale_contains: String
  sale_contains_nocase: String
  sale_not_contains: String
  sale_not_contains_nocase: String
  sale_starts_with: String
  sale_starts_with_nocase: String
  sale_not_starts_with: String
  sale_not_starts_with_nocase: String
  sale_ends_with: String
  sale_ends_with_nocase: String
  sale_not_ends_with: String
  sale_not_ends_with_nocase: String
  sale_: Sale_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum SaleLookupTable_orderBy {
  id
  blockNumber
  timestamp
  project
  token
  sale
}

enum SaleType {
  Single
  Bundle
}

input Sale_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  exchange: Exchange
  exchange_not: Exchange
  exchange_in: [Exchange!]
  exchange_not_in: [Exchange!]
  saleType: SaleType
  saleType_not: SaleType
  saleType_in: [SaleType!]
  saleType_not_in: [SaleType!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  summaryTokensSold: String
  summaryTokensSold_not: String
  summaryTokensSold_gt: String
  summaryTokensSold_lt: String
  summaryTokensSold_gte: String
  summaryTokensSold_lte: String
  summaryTokensSold_in: [String!]
  summaryTokensSold_not_in: [String!]
  summaryTokensSold_contains: String
  summaryTokensSold_contains_nocase: String
  summaryTokensSold_not_contains: String
  summaryTokensSold_not_contains_nocase: String
  summaryTokensSold_starts_with: String
  summaryTokensSold_starts_with_nocase: String
  summaryTokensSold_not_starts_with: String
  summaryTokensSold_not_starts_with_nocase: String
  summaryTokensSold_ends_with: String
  summaryTokensSold_ends_with_nocase: String
  summaryTokensSold_not_ends_with: String
  summaryTokensSold_not_ends_with_nocase: String
  saleLookupTables_: SaleLookupTable_filter
  seller: Bytes
  seller_not: Bytes
  seller_in: [Bytes!]
  seller_not_in: [Bytes!]
  seller_contains: Bytes
  seller_not_contains: Bytes
  buyer: Bytes
  buyer_not: Bytes
  buyer_in: [Bytes!]
  buyer_not_in: [Bytes!]
  buyer_contains: Bytes
  buyer_not_contains: Bytes
  payments_: Payment_filter
  isPrivate: Boolean
  isPrivate_not: Boolean
  isPrivate_in: [Boolean!]
  isPrivate_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Sale_orderBy {
  id
  txHash
  exchange
  saleType
  blockNumber
  blockTimestamp
  summaryTokensSold
  saleLookupTables
  seller
  buyer
  payments
  isPrivate
}

type Subscription {
  project(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Project
  projects(
    skip: Int = 0
    first: Int = 100
    orderBy: Project_orderBy
    orderDirection: OrderDirection
    where: Project_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Project!]!
  projectScript(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectScript
  projectScripts(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectScript_orderBy
    orderDirection: OrderDirection
    where: ProjectScript_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectScript!]!
  proposedArtistAddressesAndSplit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProposedArtistAddressesAndSplit
  proposedArtistAddressesAndSplits(
    skip: Int = 0
    first: Int = 100
    orderBy: ProposedArtistAddressesAndSplit_orderBy
    orderDirection: OrderDirection
    where: ProposedArtistAddressesAndSplit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProposedArtistAddressesAndSplit!]!
  contract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Contract
  contracts(
    skip: Int = 0
    first: Int = 100
    orderBy: Contract_orderBy
    orderDirection: OrderDirection
    where: Contract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Contract!]!
  whitelisting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Whitelisting
  whitelistings(
    skip: Int = 0
    first: Int = 100
    orderBy: Whitelisting_orderBy
    orderDirection: OrderDirection
    where: Whitelisting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Whitelisting!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  accountProject(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountProject
  accountProjects(
    skip: Int = 0
    first: Int = 100
    orderBy: AccountProject_orderBy
    orderDirection: OrderDirection
    where: AccountProject_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccountProject!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  minterFilter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MinterFilter
  minterFilters(
    skip: Int = 0
    first: Int = 100
    orderBy: MinterFilter_orderBy
    orderDirection: OrderDirection
    where: MinterFilter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MinterFilter!]!
  minter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Minter
  minters(
    skip: Int = 0
    first: Int = 100
    orderBy: Minter_orderBy
    orderDirection: OrderDirection
    where: Minter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Minter!]!
  projectMinterConfiguration(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectMinterConfiguration
  projectMinterConfigurations(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectMinterConfiguration_orderBy
    orderDirection: OrderDirection
    where: ProjectMinterConfiguration_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectMinterConfiguration!]!
  receipt(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Receipt
  receipts(
    skip: Int = 0
    first: Int = 100
    orderBy: Receipt_orderBy
    orderDirection: OrderDirection
    where: Receipt_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Receipt!]!
  payment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Payment
  payments(
    skip: Int = 0
    first: Int = 100
    orderBy: Payment_orderBy
    orderDirection: OrderDirection
    where: Payment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Payment!]!
  sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sale
  sales(
    skip: Int = 0
    first: Int = 100
    orderBy: Sale_orderBy
    orderDirection: OrderDirection
    where: Sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sale!]!
  saleLookupTable(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SaleLookupTable
  saleLookupTables(
    skip: Int = 0
    first: Int = 100
    orderBy: SaleLookupTable_orderBy
    orderDirection: OrderDirection
    where: SaleLookupTable_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SaleLookupTable!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  projectExternalAssetDependency(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProjectExternalAssetDependency
  projectExternalAssetDependencies(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectExternalAssetDependency_orderBy
    orderDirection: OrderDirection
    where: ProjectExternalAssetDependency_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectExternalAssetDependency!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Token {
  """Unique identifier made up of contract address and token id"""
  id: ID!
  """ID of the token on the contract"""
  tokenId: BigInt!
  """Contract the token is on"""
  contract: Contract!
  """Invocation number of the project"""
  invocation: BigInt!
  """Unique string used as input to the tokens project script"""
  hash: Bytes!
  """Current owner of the token"""
  owner: Account!
  """Project of the token"""
  project: Project!
  uri: String
  createdAt: BigInt!
  updatedAt: BigInt!
  """Transaction hash of token mint"""
  transactionHash: Bytes!
  transfers(skip: Int = 0, first: Int = 100, orderBy: Transfer_orderBy, orderDirection: OrderDirection, where: Transfer_filter): [Transfer!]
  """Lookup table to get the Sale history"""
  saleLookupTables(skip: Int = 0, first: Int = 100, orderBy: SaleLookupTable_orderBy, orderDirection: OrderDirection, where: SaleLookupTable_filter): [SaleLookupTable!]!
  """Next available sale id"""
  nextSaleId: BigInt!
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  invocation: BigInt
  invocation_not: BigInt
  invocation_gt: BigInt
  invocation_lt: BigInt
  invocation_gte: BigInt
  invocation_lte: BigInt
  invocation_in: [BigInt!]
  invocation_not_in: [BigInt!]
  hash: Bytes
  hash_not: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  project: String
  project_not: String
  project_gt: String
  project_lt: String
  project_gte: String
  project_lte: String
  project_in: [String!]
  project_not_in: [String!]
  project_contains: String
  project_contains_nocase: String
  project_not_contains: String
  project_not_contains_nocase: String
  project_starts_with: String
  project_starts_with_nocase: String
  project_not_starts_with: String
  project_not_starts_with_nocase: String
  project_ends_with: String
  project_ends_with_nocase: String
  project_not_ends_with: String
  project_not_ends_with_nocase: String
  project_: Project_filter
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  transfers_: Transfer_filter
  saleLookupTables_: SaleLookupTable_filter
  nextSaleId: BigInt
  nextSaleId_not: BigInt
  nextSaleId_gt: BigInt
  nextSaleId_lt: BigInt
  nextSaleId_gte: BigInt
  nextSaleId_lte: BigInt
  nextSaleId_in: [BigInt!]
  nextSaleId_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Token_orderBy {
  id
  tokenId
  contract
  invocation
  hash
  owner
  project
  uri
  createdAt
  updatedAt
  transactionHash
  transfers
  saleLookupTables
  nextSaleId
}

type Transfer {
  id: ID!
  transactionHash: Bytes!
  token: Token!
  createdAt: BigInt!
  to: Bytes!
  from: Bytes!
}

input Transfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  to: Bytes
  to_not: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  from: Bytes
  from_not: Bytes
  from_in: [Bytes!]
  from_not_in: [Bytes!]
  from_contains: Bytes
  from_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Transfer_orderBy {
  id
  transactionHash
  token
  createdAt
  to
  from
}

type Whitelisting {
  id: ID!
  account: Account!
  contract: Contract!
}

input Whitelisting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: Contract_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Whitelisting_orderBy {
  id
  account
  contract
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}